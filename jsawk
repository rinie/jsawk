#!/usr/bin/env bash

#
# Jsawk: It's like awk for JSON, in bash.
#
# Fork me on github:
#   http://github.com/micha/jsawk
#
# Author:
#   Micha Niskin <micha@thinkminimo.com>
#   Copyright 2009, no rights reserved, other than as required by the
#   licenses of the incorporated software below.
#

TMP1=`mktemp /tmp/tmp.XXXXXX`
TMP2=`mktemp /tmp/tmp.XXXXXX`

trap "rm -f $TMP1 $TMP2" SIGINT SIGTERM SIGHUP SIGQUIT

cat <<'__END__' > $TMP1


nlines=0
get_lines="yes"
input_file=
input_string=

while getopts :hni:s:j:q:f:b:a:v: opt; do
  case $opt in
    h) get_lines="no" ;;
    i) input_file="$OPTARG" ;;
    j) js_arg=$OPTARG ;;
    s) input_string="$OPTARG" ;;
  esac
done

if [ $get_lines != "no" ]; then
  if [ -n "$input_string" ]; then
  	# Pass in the input string specified directly
  	echo "$input_string" > $TMP2
  elif [ -n "$input_file" ]; then
  	# Pass in the input file contents specified, first checking the file exists
  	if ! [ -e "$input_file" ]; then
  		echo "Error: Input file cannot be found: $input_file"
  		exit 1
  	fi
  	cat "$input_file" > $TMP2
  else
  	# Read input from STDIN
    echo "$(cat 2>/dev/null)" > $TMP2
  fi
  nlines=$(grep -c '$' $TMP2 2>/dev/null || echo 0)
fi

if [ -e /etc/jsawkrc ]; then
  . /etc/jsawkrc
fi

if [ -e ~/.jsawkrc ]; then
  . ~/.jsawkrc
fi

JSBIN=${js_arg:-${JS:-js}}

ret=$?
res=$(cat $TMP2 2>/dev/null | $JSBIN $TMP1 $nlines "$@")
out=$(echo "$res" |sed '/^OUT: /s/^.....//p;d')
err=$(echo "$res" |sed '/^ERR: /s/^.....//p;d')

[ -n "$err" ] && echo "$err" 1>&2
[ -n "$out" ] && echo "$out"

rm -f $TMP1 $TMP2

exit $ret
